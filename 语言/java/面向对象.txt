1.类与对象
* 类是蓝图，对象是类的实例化。
* 对象 = 数据 + 服务。 数据应该是私有的，而服务是对外公布的。封装的思想。
* 对象变量 是对象的管理者。
|
|------成员变量
|  类内可见，作用域是对象内。
|------成员函数
|
|--private,私有，类内可见，类外不可见，体现了封装的思想。
|
|--public，公有，任何人都可以访问。
|
|--frendly（非public，private），友好的，包内可访问。
|
|--static变量,静态变量（类变量），类的所有对象所共享的，是在jvm的heap上定义的。在类的装载时进行一次初始化。
|
|--static class，静态类。
|
|--static function 静态函数，为所有对象所共有。


父类成员访问属性	在父类中的含义	   在子类中的含义
public	            对所有人开放	    对所有人开放
protected	        只有包内其它类、自己和子类可以访问	只有包内其它类、自己和子类可以访问
缺省	            只有包内其它类可以访问	如果子类与父类在同一个包内：只有包内其它类可以访问，否则：相当于private，不能访问
private	            只有自己可以访问	不能访问



2.继承
将事物的共性的东西抽象成一个公共类。子类继承并扩展公共类。
A extends B -- 继承表达了一种is-a关系，母鸡是鸡。
子类对象可以赋值给父类对象。
Viechle v1 = new Car(); -- 向上造型
父类不可以赋值给子类

Car c = new Viechle(); xxxx


3.方法的绑定
静态绑定：使用声明类型的方法。
动态绑定：使用运行时动态类型的对应方法。

4.抽象 abstract

抽象类，不能被实例化。实例化一个抽象的概念没有意义，比如画一个形状。形状是一个抽象类。我不知道怎么new 一个形状出来。或者让一个动物叫一下。
抽象函数，表达概念而无法具体实现的函数。抽象类可以有非抽象的方法。
有一个抽象函数的类一定是抽象类。


5.接口 interface 
接口是抽象类。
所有成员函数都是抽象函数。
所有成员变量都是public static final
类可以实现多个接口。
接口可以继承接口。
java不允许多继承。


6.面向接口的编程

7.反转控制/注入


8.内部类
内部类可以访问所属类的成员变量和函数。

9.对象的初始化
基本类型初始化为0，0.0，''
，对象类型初始化为null。确保对象在被调用前都已经被new过，不然会出现空指针错误。
