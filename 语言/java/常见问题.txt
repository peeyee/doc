1. 无法加载主类
之所以找不到，是因为在某个包名的下面。

解决办法：

1.去掉 ”package HelloWorld;“ 重新用javac 编译TestPlusPlus.java,再运行javaTestPlusPlus就可以了。

2.新建一个包名一样的文件夹，在本例中，为建立一个HelloWorld的文件夹，把TestPlusPlus.java文件移到该目录下。

然后在HelloWorld文件夹的平级下，打开DOS命令窗口，运行javacHelloWorld/TestPlusPlus.java编译程序，

运行javaHelloWorld/TestPlusPlus(或者javaHelloWorld.TestPlusPlus也可以)，则可以运行含有包名的java程序。

注意:包名不要含有'.'(点),' '(空格)等特殊符号，这样的话命令行无法判断包名与java程序名的分割点在哪里，

从而还是找到或者无法加载主类。

原理说明：

java程序运行class文件,对于有包名的类,java把包名当成文件夹处理."包名+类名"相当于"文件夹目录+类名"来寻找类。



3. 抽象类可以被实例化么？
答：直接不可以。可以通过new 子类的方式实现。
package learnjava;

public abstract class B {
	public B() {
		// TODO Auto-generated constructor stub
		System.out.println("B 已经被实例化");
	}
	

}

package learnjava;

public class C extends B {
	public C() {
		// TODO Auto-generated constructor stub
		System.out.println("C 已经被实例化。");
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		C c = new C();
	}

}
如上代码，运行如下：
B 已经被实例化。
C 已经被实例化。
说明B已经实例化了，但是无法直接获得B的引用。

4.抽象方法与抽象类的关系
有抽象方法一定是抽象类，抽象类可以包含非抽象方法，也可以加default默认字实现抽象方法。


5.子类与父类构造函数的关系

当new一个子类对象时，会调用子类的构造函数,在子类的构造函数中，其实第一条语句默认会执行super();

1.如果父类没有无参的构造函数则会报错Implicit super constructor Graph() is undefined.可以如下处理
  A. 給父类写一个无参构造函数
  B. 显示的调用父类有参的构造函数，如super(int n);
————————————————

原文链接：https://blog.csdn.net/qq646040754/article/details/80462270