1.
package learnhbase;
import java.io.IOException;
import java.net.URISyntaxException;

//import java.nio.file.Path;
import org.apache.hadoop.conf.Configuration;
//import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HConstants;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.io.compress.Compression.Algorithm;

/**
 * @author Administrator
 *
 */
public class HelloHBase {
	
	
	/**
	 * 新建一个表，如果表已经存在就删除重建。
	 * @author Administrator
	 * @param admin
	 * @param table
	 * @throws IOException
	 */
	
	public static void createOrOverwrite(Admin admin,HTableDescriptor table)
	throws IOException
	{
		if(admin.tableExists(table.getTableName()))
		{
			admin.disableTable(table.getTableName());
			admin.deleteTable(table.getTableName());
		}
		admin.createTable(table);
	}
	
   /**
    * 新建表mytable,包含列族mycf
    * @param conf
    * @throws IOException
    * 下午3:07:20
    */
	public static void createSchemaTables(Configuration conf)
			throws IOException
	{
		try
		(
				Connection conn = ConnectionFactory.createConnection(conf);
				Admin admin = conn.getAdmin();
		 )
				
		{
			HTableDescriptor table = new HTableDescriptor(TableName.valueOf("mytable"));
			table.addFamily(new HColumnDescriptor("mycf")
					.setCompactionCompressionType(Algorithm.GZ));
			System.out.println("Creating table. ");
			createOrOverwrite(admin, table);
			System.out.println("Done. ");
		}
	}

	/**
	 * 修改表，添加列族,修改列族
	 * @param conf
	 * @throws IOException
	 * 下午3:22:49
	 */
	public static void modifySchema(Configuration conf)
			throws IOException
	{
		try
		(
				Connection conn = ConnectionFactory.createConnection(conf);
				Admin admin = conn.getAdmin();
		 )
		{
			TableName tableName = TableName.valueOf("mytable");
			if(!admin.tableExists(tableName))
			{
				System.out.println("table does not exist.");
				System.exit(-1);
			}
			
			//往mytable里添加列族mycf2
			HColumnDescriptor newCloumnF = new HColumnDescriptor("mycf2");
			newCloumnF.setCompactionCompressionType(Algorithm.NONE);
			newCloumnF.setMaxVersions(HConstants.ALL_VERSIONS);
			admin.addColumn(tableName, newCloumnF);
			
			//获取定义
			HTableDescriptor table = admin.getTableDescriptor(tableName);
			
			
			//更新 mycf这个列族
			HColumnDescriptor oldCloumnF = new HColumnDescriptor("mycf");
			oldCloumnF.setCompactionCompressionType(Algorithm.NONE);
			oldCloumnF.setMaxVersions(5);
			table.modifyFamily(oldCloumnF);
			admin.modifyTable(tableName, table);
			System.out.println("modified "+tableName);
			
		}
	}
	
	public static void deleteSchema(Configuration conf)
		throws IOException
	{
		try
		(
		   Connection conn = ConnectionFactory.createConnection(conf); 
		   Admin admin = conn.getAdmin();
		   
		)
		{
			TableName tableName = TableName.valueOf("mytable");
			
			//停用mytable表
			admin.disableTable(tableName);
			System.out.println("disabled "+tableName);
			//mycf列族
			admin.deleteColumn(tableName, "mycf".getBytes("UTF-8"));
			
			//删除mytable表
			admin.deleteTable(tableName);
			
			System.out.println("deleted "+tableName);
		}
	}

	public static void main(String[] args) 
	throws IOException, URISyntaxException
	{



		//用静态方法create创建配置类，conf加载连接hbase的各项配置
		Configuration config = HBaseConfiguration.create();
		config.set("hbase.zookeeper.quorum", "oracle-11g:2181"); //连接zookeeper
		
		createSchemaTables(config);
		
		//modifySchema(config);

		//deleteSchema(config);


	}

}
